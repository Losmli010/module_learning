import re

# re.compile(pattern): 将正则表达式的pattern编写为正则表达式对象
pattern = re.compile(r"[0-9]")
print(pattern)

# re.match(pattern, string, flags): 从字符串的首字符开始和pattern匹配, 如果首字符没有匹配则返回None,
# 否则返回匹配到的子字符串对象, 调用group方法返回结果
m = re.match(pattern, "222abc12")
print(m.group())

# re.search(pattern, string, flags): 将字符串从左向右和pattern匹配, 如果搜索到末字符都没有匹配则返回None,
# 否则返回第一次符合匹配规则的子字符串对象, 后续字符不会被搜索, 调用group方法返回结果
s = re.search(pattern, "dfb")
print(s)

# re.findall(pattern, string, flags): 将所有匹配到的子字符串以列表的形式返回, 无匹配则返回[]
f = re.findall(pattern, "dfgk,.m")
print(f)

# re.split(pattern, string, flags): 将字符串按匹配模式分割成列表形式返回
sp = re.split(pattern, "dbc23db3ml5")
print(sp)

# re.sub(pattern, replace, string): 将匹配到的子字符串替换为replace字符串
su = re.sub(pattern, "-", "hello2world3bye")
print(su)

"""
----------匹配单个字符与数字---------
.                匹配除换行符以外的任意字符
[0123456789]     []是字符集合，表示匹配方括号中所包含的任意一个字符
[good]           匹配good中任意一个字符
[a-z]            匹配任意小写字母
[A-Z]            匹配任意大写字母
[0-9]            匹配任意数字，类似[0123456789]
[0-9a-zA-Z]      匹配任意的数字和字母
[0-9a-zA-Z_]     匹配任意的数字、字母和下划线
[^good]          匹配除了good这几个字母以外的所有字符，中括号里的^称为脱字符，表示不匹配集合中的字符
[^0-9]           匹配所有的非数字字符
\d               匹配数字，效果同[0-9]
\D               匹配非数字字符，效果同[^0-9]
\w               匹配数字，字母和下划线,效果同[0-9a-zA-Z_]
\W               匹配非数字，字母和下划线，效果同[^0-9a-zA-Z_]
\s               匹配任意的空白符(空格，回车，换行，制表，换页)，效果同[ \r\n\t\f]
\S               匹配任意的非空白符，效果同[^ \f\n\r\t]

--------------锚字符(边界字符)-------------
^     行首匹配，和在[]里的^不是一个意思
$     行尾匹配
\A    匹配字符串开始，它和^的区别是,\A只匹配整个字符串的开头，即使在re.M模式下也不会匹配它行的行首
\Z    匹配字符串结束，它和$的区别是,\Z只匹配整个字符串的结束，即使在re.M模式下也不会匹配它行的行尾
\b    匹配一个单词的边界，也就是值单词和空格间的位置
\B    匹配非单词边界

-------------------匹配多个字符------------------------

说明：下方的x、y、z均为假设的普通字符,n、m（非负整数），不是正则表达式的元字符
(xyz)    匹配小括号内的xyz(作为一个整体去匹配)
x?       匹配0个或者1个x
x*       匹配0个或者任意多个x（.* 表示匹配0个或者任意多个字符(换行符除外)）
x+       匹配至少一个x
x{n}     匹配确定的n个x（n是一个非负整数）
x{n,}    匹配至少n个x
x{n,m}   匹配至少n个最多m个x。注意：n <= m
x|y      |表示或，匹配的是x或y

---------------特殊-------------------
*?   +?   x?  最小匹配，通常都是尽可能多的匹配，可以使用这种解决贪婪匹配
(?:x)        类似(xyz),但不表示一个组
"""
